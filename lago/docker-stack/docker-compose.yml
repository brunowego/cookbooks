---
services:
  lago-postgres:
    image: docker.io/library/postgres:15.1-alpine
    container_name: boilerplate-lago-postgres
    volumes:
      - type: volume
        source: lago-postgresql-data
        target: /var/lib/postgresql/data
    environment:
      POSTGRES_USER: lago
      POSTGRES_PASSWORD: lago
      POSTGRES_DB: lago
    restart: unless-stopped

  lago-redis:
    image: docker.io/library/redis:7.0.10-alpine
    container_name: boilerplate-lago-redis
    volumes:
      - type: volume
        source: lago-redis-data
        target: /data
    restart: unless-stopped

  lago-api:
    image: docker.io/getlago/api:v0.34.0-beta
    container_name: boilerplate-lago-api
    volumes:
      - type: volume
        source: lago-api-data
        target: /app/storage
    environment:
      LAGO_API_URL: $LAGO_API_URL
      DATABASE_URL:
      REDIS_URL:
      SECRET_KEY_BASE:
      RAILS_ENV: $APP_ENV
      RAILS_LOG_TO_STDOUT: $LAGO_RAILS_STDOUT
      SENTRY_DSN:
      LAGO_FRONT_URL:
      LAGO_RSA_PRIVATE_KEY:
      LAGO_SIDEKIQ_WEB:
      RSA_PRIVATE_KEY: $LAGO_RSA_PRIVATE_KEY
      ENCRYPTION_PRIMARY_KEY: $LAGO_ENCRYPTION_PRIMARY_KEY
      ENCRYPTION_DETERMINISTIC_KEY: $LAGO_ENCRYPTION_DETERMINISTIC_KEY
      ENCRYPTION_KEY_DERIVATION_SALT: $LAGO_ENCRYPTION_KEY_DERIVATION_SALT
      LAGO_USE_AWS_S3:
      LAGO_USE_GCS:
      LAGO_PDF_URL:
      LAGO_REDIS_CACHE_URL: $REDIS_URL
      LAGO_REDIS_CACHE_PASSWORD:
      LAGO_DISABLE_SEGMENT:
      LAGO_OAUTH_PROXY_URL:
      # LAGO_LICENSE:
    command: [./scripts/start.sh]
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
    restart: unless-stopped
    depends_on:
      - lago-postgres
      - lago-redis

  lago-worker:
    image: docker.io/getlago/api:v0.34.0-beta
    container_name: boilerplate-lago-worker
    volumes:
      - type: volume
        source: lago-worker-data
        target: /app/storage
    environment:
      LAGO_API_URL: $LAGO_API_URL
      DATABASE_URL:
      REDIS_URL:
      SECRET_KEY_BASE:
      RAILS_ENV: $APP_ENV
      RAILS_LOG_TO_STDOUT: $LAGO_RAILS_STDOUT
      SENTRY_DSN:
      LAGO_RSA_PRIVATE_KEY:
      RSA_PRIVATE_KEY: $LAGO_RSA_PRIVATE_KEY
      ENCRYPTION_PRIMARY_KEY: $LAGO_ENCRYPTION_PRIMARY_KEY
      ENCRYPTION_DETERMINISTIC_KEY: $LAGO_ENCRYPTION_DETERMINISTIC_KEY
      ENCRYPTION_KEY_DERIVATION_SALT: $LAGO_ENCRYPTION_KEY_DERIVATION_SALT
      LAGO_USE_AWS_S3:
      LAGO_USE_GCS:
      LAGO_PDF_URL:
      LAGO_REDIS_CACHE_URL: $REDIS_URL
      LAGO_REDIS_CACHE_PASSWORD:
      LAGO_DISABLE_SEGMENT:
    command: [./scripts/start.worker.sh]
    restart: unless-stopped
    depends_on:
      - lago-api

  lago-clock:
    image: docker.io/getlago/api:v0.34.0-beta
    container_name: boilerplate-lago-clock
    environment:
      LAGO_API_URL:
      DATABASE_URL:
      REDIS_URL:
      SECRET_KEY_BASE:
      RAILS_ENV: $APP_ENV
      RAILS_LOG_TO_STDOUT: $LAGO_RAILS_STDOUT
      SENTRY_DSN:
      LAGO_RSA_PRIVATE_KEY:
      RSA_PRIVATE_KEY: $LAGO_RSA_PRIVATE_KEY
      ENCRYPTION_PRIMARY_KEY: $LAGO_ENCRYPTION_PRIMARY_KEY
      ENCRYPTION_DETERMINISTIC_KEY: $LAGO_ENCRYPTION_DETERMINISTIC_KEY
      ENCRYPTION_KEY_DERIVATION_SALT: $LAGO_ENCRYPTION_KEY_DERIVATION_SALT
    command: [./scripts/start.clock.sh]
    restart: unless-stopped
    depends_on:
      - lago-api

  lago-front:
    image: docker.io/getlago/front:v0.34.0-beta
    container_name: boilerplate-lago-front
    environment:
      API_URL: $LAGO_API_URL
      APP_ENV:
      CODEGEN_API: $LAGO_API_URL
      LAGO_DISABLE_SIGNUP:
      LAGO_OAUTH_PROXY_URL:
    ports:
      - target: 80
        published: 8080
        protocol: tcp
    restart: unless-stopped
    depends_on:
      - lago-api

  lago-pdf:
    image: docker.io/getlago/lago-gotenberg:7
    container_name: boilerplate-lago-pdf
    restart: unless-stopped

volumes:
  lago-postgresql-data:
    driver: local
  lago-redis-data:
    driver: local
  lago-api-data:
    driver: local
  lago-worker-data:
    driver: local
